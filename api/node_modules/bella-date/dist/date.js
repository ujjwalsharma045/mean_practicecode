/**
 * bella-date@1.1.2
 * built on: Mon, 07 Aug 2017 06:12:55 GMT
 * repository: https://github.com/ndaidong/bella-date
 * maintainer: @ndaidong
 * License: MIT
**/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.date = {})));
}(this, (function (exports) { 'use strict';
  var ob2Str = function ob2Str(val) {
    return {}.toString.call(val);
  };
  var isString = function isString(val) {
    return ob2Str(val) === '[object String]';
  };
  var isNumber = function isNumber(val) {
    return ob2Str(val) === '[object Number]';
  };
  var isDate = function isDate(val) {
    return val instanceof Date && !isNaN(val.valueOf());
  };
  var toString = function toString(input) {
    var s = isNumber(input) ? String(input) : input;
    if (!isString(s)) {
      throw new Error('InvalidInput: String required.');
    }
    return s;
  };
  var leftPad = function leftPad(s) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var pad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
    var x = toString(s);
    return x.length >= size ? x : new Array(size - x.length + 1).join(pad) + x;
  };
  var now = function now() {
    return new Date();
  };
  var time = function time() {
    return Date.now();
  };
  var PATTERN = 'D, M d, Y  h:i:s A';
  var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var tz = function () {
    var t = now().getTimezoneOffset();
    var z = Math.abs(t / 60);
    var sign = t < 0 ? '+' : '-';
    return ['GMT', sign, leftPad(z, 4)].join('');
  }();
  var _num = function _num(n) {
    return String(n < 10 ? '0' + n : n);
  };
  var _ord = function _ord(day) {
    var s = day + ' ';
    var x = s.charAt(s.length - 2);
    if (x === '1') {
      s = 'st';
    } else if (x === '2') {
      s = 'nd';
    } else if (x === '3') {
      s = 'rd';
    } else {
      s = 'th';
    }
    return s;
  };
  var format = function format(input) {
    var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PATTERN;
    var d = isDate(input) ? input : new Date(input);
    if (!isDate(d)) {
      throw new Error('InvalidInput: Number or Date required.');
    }
    if (!isString(output)) {
      throw new Error('Invalid output pattern.');
    }
    var vchar = /\.*\\?([a-z])/gi;
    var meridiem = output.match(/(\.*)a{1}(\.*)*/i);
    var wn = WEEKDAYS;
    var mn = MONTHS;
    var f = {
      Y: function Y() {
        return d.getFullYear();
      },
      y: function y() {
        return (f.Y() + '').slice(-2);
      },
      F: function F() {
        return mn[f.n() - 1];
      },
      M: function M() {
        return (f.F() + '').slice(0, 3);
      },
      m: function m() {
        return _num(f.n());
      },
      n: function n() {
        return d.getMonth() + 1;
      },
      S: function S() {
        return _ord(f.j());
      },
      j: function j() {
        return d.getDate();
      },
      d: function d() {
        return _num(f.j());
      },
      t: function t() {
        return new Date(f.Y(), f.n(), 0).getDate();
      },
      w: function w() {
        return d.getDay();
      },
      l: function l() {
        return wn[f.w()];
      },
      D: function D() {
        return (f.l() + '').slice(0, 3);
      },
      G: function G() {
        return d.getHours();
      },
      g: function g() {
        return f.G() % 12 || 12;
      },
      h: function h() {
        return _num(meridiem ? f.g() : f.G());
      },
      i: function i() {
        return _num(d.getMinutes());
      },
      s: function s() {
        return _num(d.getSeconds());
      },
      a: function a() {
        return f.G() > 11 ? 'pm' : 'am';
      },
      A: function A() {
        return f.a().toUpperCase();
      },
      O: function O() {
        return tz;
      }
    };
    var _term = function _term(t, s) {
      return f[t] ? f[t]() : s;
    };
    return output.replace(vchar, _term);
  };
  var relativize = function relativize() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time();
    var d = isDate(input) ? input : new Date(input);
    if (!isDate(d)) {
      throw new Error('InvalidInput: Number or Date required.');
    }
    var delta = now() - d;
    var nowThreshold = parseInt(d, 10);
    if (isNaN(nowThreshold)) {
      nowThreshold = 0;
    }
    if (delta <= nowThreshold) {
      return 'Just now';
    }
    var units = null;
    var conversions = {
      millisecond: 1,
      second: 1000,
      minute: 60,
      hour: 60,
      day: 24,
      month: 30,
      year: 12
    };
    for (var key in conversions) {
      if (delta < conversions[key]) {
        break;
      } else {
        units = key;
        delta /= conversions[key];
      }
    }
    delta = Math.floor(delta);
    if (delta !== 1) {
      units += 's';
    }
    return [delta, units].join(' ') + ' ago';
  };
  var utc = function utc() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time();
    var d = isDate(input) ? input : new Date(input);
    if (!isDate(d)) {
      throw new Error('InvalidInput: Number or Date required.');
    }
    return new Date(d).toUTCString();
  };
  var local = function local() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time();
    var d = isDate(input) ? input : new Date(input);
    if (!isDate(d)) {
      throw new Error('InvalidInput: Number or Date required.');
    }
    return format(d, 'D, j M Y h:i:s O');
  };
  exports.format = format;
  exports.relativize = relativize;
  exports.utc = utc;
  exports.local = local;
  Object.defineProperty(exports, '__esModule', { value: true });
})));
